[gd_resource type="VisualShader" load_steps=10 format=3 uid="uid://bytkhs4shjklu"]

[sub_resource type="VisualShaderNodeVectorDecompose" id="VisualShaderNodeVectorDecompose_7yonq"]
default_input_values = [0, Quaternion(0, 0, 0, 0)]
op_type = 2

[sub_resource type="VisualShaderNodeIntConstant" id="VisualShaderNodeIntConstant_vhor4"]

[sub_resource type="VisualShaderNodeColorParameter" id="VisualShaderNodeColorParameter_q0f5s"]
parameter_name = "FovColor"

[sub_resource type="VisualShaderNodeTexture2DParameter" id="VisualShaderNodeTexture2DParameter_yirr0"]
parameter_name = "FOV_Mask"
texture_type = 1
color_default = 1

[sub_resource type="VisualShaderNodeInput" id="VisualShaderNodeInput_fne7b"]
input_name = "uv"

[sub_resource type="VisualShaderNodeTexture" id="VisualShaderNodeTexture_2ucl4"]
source = 5

[sub_resource type="VisualShaderNodeIf" id="VisualShaderNodeIf_73fkw"]
default_input_values = [0, 0.0, 1, 0.1, 2, 0.1, 3, Vector3(0, 0, 0), 4, Vector3(0, 0, 0), 5, Vector3(0, 0, 0)]

[sub_resource type="VisualShaderNodeFloatConstant" id="VisualShaderNodeFloatConstant_uwvax"]
constant = 1.0

[sub_resource type="VisualShaderNodeFloatConstant" id="VisualShaderNodeFloatConstant_oje8g"]

[resource]
code = "shader_type canvas_item;
render_mode blend_mix;

uniform vec4 FovColor : source_color;
uniform sampler2D FOV_Mask : source_color, hint_default_black;



void fragment() {
// ColorParameter:2
	vec4 n_out2p0 = FovColor;


// Input:4
	vec2 n_out4p0 = UV;


// IntConstant:13
	int n_out13p0 = 0;


	vec4 n_out5p0;
// Texture2D:5
	n_out5p0 = textureLod(FOV_Mask, n_out4p0, float(n_out13p0));


// VectorDecompose:10
	float n_out10p0 = n_out5p0.x;
	float n_out10p1 = n_out5p0.y;
	float n_out10p2 = n_out5p0.z;
	float n_out10p3 = n_out5p0.w;


// FloatConstant:7
	float n_out7p0 = 1.000000;


// FloatConstant:8
	float n_out8p0 = 0.000000;


	vec3 n_out6p0;
// If:6
	float n_in6p1 = 0.10000;
	float n_in6p2 = 0.10000;
	if(abs(n_out10p0 - n_in6p1) < n_in6p2)
	{
		n_out6p0 = vec3(n_out7p0);
	}
	else if(n_out10p0 < n_in6p1)
	{
		n_out6p0 = vec3(n_out7p0);
	}
	else
	{
		n_out6p0 = vec3(n_out8p0);
	}


// Output:0
	COLOR.rgb = vec3(n_out2p0.xyz);
	COLOR.a = n_out6p0.x;


}
"
graph_offset = Vector2(-383.887, 46.4508)
mode = 1
flags/light_only = false
nodes/fragment/0/position = Vector2(420, 240)
nodes/fragment/2/node = SubResource("VisualShaderNodeColorParameter_q0f5s")
nodes/fragment/2/position = Vector2(40, 0)
nodes/fragment/3/node = SubResource("VisualShaderNodeTexture2DParameter_yirr0")
nodes/fragment/3/position = Vector2(-860, 460)
nodes/fragment/4/node = SubResource("VisualShaderNodeInput_fne7b")
nodes/fragment/4/position = Vector2(-860, 220)
nodes/fragment/5/node = SubResource("VisualShaderNodeTexture_2ucl4")
nodes/fragment/5/position = Vector2(-460, 280)
nodes/fragment/6/node = SubResource("VisualShaderNodeIf_73fkw")
nodes/fragment/6/position = Vector2(120, 420)
nodes/fragment/7/node = SubResource("VisualShaderNodeFloatConstant_uwvax")
nodes/fragment/7/position = Vector2(-180, 520)
nodes/fragment/8/node = SubResource("VisualShaderNodeFloatConstant_oje8g")
nodes/fragment/8/position = Vector2(-180, 620)
nodes/fragment/10/node = SubResource("VisualShaderNodeVectorDecompose_7yonq")
nodes/fragment/10/position = Vector2(-180, 280)
nodes/fragment/13/node = SubResource("VisualShaderNodeIntConstant_vhor4")
nodes/fragment/13/position = Vector2(-860, 340)
nodes/fragment/connections = PackedInt32Array(3, 0, 5, 2, 7, 0, 6, 3, 7, 0, 6, 5, 8, 0, 6, 4, 5, 0, 10, 0, 2, 0, 0, 0, 4, 0, 5, 0, 6, 0, 0, 1, 13, 0, 5, 1, 10, 0, 6, 0)
